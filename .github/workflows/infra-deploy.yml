name: Deploy infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - '.github/workflows/infra-deploy.yml'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

env:
  AZURE_RESOURCE_GROUP_NAME: ${{ vars.AZURE_RESOURCE_GROUP_NAME }}
  AZURE_RESOURCE_GROUP_LOCATION: ${{ vars.AZURE_RESOURCE_GROUP_LOCATION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure resource group exists
        env:
          RESOURCE_GROUP_NAME: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
          RESOURCE_GROUP_LOCATION: ${{ env.AZURE_RESOURCE_GROUP_LOCATION }}
        run: |
          if [ -z "$RESOURCE_GROUP_NAME" ]; then
            echo "::error::AZURE_RESOURCE_GROUP_NAME repository variable is not set."
            exit 1
          fi
          if [ -z "$RESOURCE_GROUP_LOCATION" ]; then
            echo "::error::AZURE_RESOURCE_GROUP_LOCATION repository variable is not set."
            exit 1
          fi

          az group create \
            --name "$RESOURCE_GROUP_NAME" \
            --location "$RESOURCE_GROUP_LOCATION" \
            --only-show-errors > /dev/null

      - name: Deploy Bicep templates
        id: deploy
        env:
          RESOURCE_GROUP_NAME: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
          DEPLOYMENT_NAME: iac-${{ github.run_id }}
        run: |
          if [ -z "$RESOURCE_GROUP_NAME" ]; then
            echo "::error::AZURE_RESOURCE_GROUP_NAME repository variable is not set."
            exit 1
          fi

          az deployment group create \
            --name "$DEPLOYMENT_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --template-file infra/main.bicep \
            --parameters infra/main.bicepparam \
            --only-show-errors

          REGISTRY_NAME=$(az deployment group show \
            --name "$DEPLOYMENT_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --query "properties.outputs.containerRegistryName.value" -o tsv)

          LOGIN_SERVER=$(az deployment group show \
            --name "$DEPLOYMENT_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --query "properties.outputs.containerRegistryLoginServer.value" -o tsv)

          if [ -n "$REGISTRY_NAME" ]; then
            echo "registryName=$REGISTRY_NAME" >> "$GITHUB_OUTPUT"
          fi

          if [ -n "$LOGIN_SERVER" ]; then
            echo "loginServer=$LOGIN_SERVER" >> "$GITHUB_OUTPUT"
          fi

      # --- ここからデバッグ用ステップ ---

      - name: Debug context summary
        run: |
          echo "Repo          : ${{ github.repository }}"
          echo "Actor         : ${{ github.actor }}"
          echo "Event         : ${{ github.event_name }}"
          echo "Ref           : ${{ github.ref }}"
          IS_FORK=$(jq -r '.pull_request.head.repo.fork? // false' "$GITHUB_EVENT_PATH")
          echo "Is Fork?      : $IS_FORK"
          echo "Outputs(reg)  : ${{ steps.deploy.outputs.registryName }}"
          echo "Outputs(login): ${{ steps.deploy.outputs.loginServer }}"

      - name: Debug gh version & auth status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh --version
          # gh は GH_TOKEN または GITHUB_TOKEN を自動検出する
          gh auth status -h github.com || true

      - name: Debug can list repository variables?
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 読み取りができるか確認（失敗なら権限/対象リポの問題）
          gh variable list --repo "${{ github.repository }}" || true

      - name: Debug raw REST check (GET /variables)
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 200 が返れば少なくとも read は通っている
          set +e
          code=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables)
          echo "GET /actions/variables HTTP status: $code"

      # --- 本番の変数更新（権限が足りない場合の振る舞いも改善） ---

      - name: Update repository variables
        if: steps.deploy.outputs.registryName != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # gh が確実に読む変数名に統一
        run: |
          if [ -z "${GH_TOKEN:-}" ]; then
            echo "::warning::Skipping repository variable update because GH_TOKEN is not set."
            exit 0
          fi

          echo "Setting ACR_NAME=${{ steps.deploy.outputs.registryName }}"
          gh variable set ACR_NAME --body "${{ steps.deploy.outputs.registryName }}" --repo "${{ github.repository }}" || {
            echo "::error::Failed to set ACR_NAME (possible 403)."
            exit 1
          }

          if [ -n "${{ steps.deploy.outputs.loginServer }}" ]; then
            echo "Setting ACR_LOGIN_SERVER=${{ steps.deploy.outputs.loginServer }}"
            gh variable set ACR_LOGIN_SERVER --body "${{ steps.deploy.outputs.loginServer }}" --repo "${{ github.repository }}" || {
              echo "::error::Failed to set ACR_LOGIN_SERVER (possible 403)."
              exit 1
            }
          fi
